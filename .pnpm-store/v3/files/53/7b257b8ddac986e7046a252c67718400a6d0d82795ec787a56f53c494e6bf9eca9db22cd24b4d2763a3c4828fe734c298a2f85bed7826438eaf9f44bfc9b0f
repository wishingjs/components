var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/clientLoader/clientLoader.ts
var clientLoader_exports = {};
__export(clientLoader_exports, {
  default: () => clientLoader_default
});
module.exports = __toCommonJS(clientLoader_exports);
var import_esbuild = __toESM(require("@umijs/bundler-utils/compiled/esbuild"));
var import_path = require("path");
var clientLoader_default = (api) => {
  api.describe({
    config: {
      schema(Joi) {
        return Joi.object({});
      }
    },
    enableBy: api.EnableBy.config
  });
  api.onGenerateFiles(() => {
    const clientLoaderImports = [];
    const clientLoaderDefines = [];
    const routeIds = Object.keys(api.appData.routes);
    let index = 0;
    for (const id of routeIds) {
      const route = api.appData.routes[id];
      if (route.__hasClientLoader) {
        index += 1;
        clientLoaderImports.push(
          `import { clientLoader as loader_${index} } from '${route.__absFile}';`
        );
        clientLoaderDefines.push(`  '${id}': loader_${index},`);
      }
    }
    api.writeTmpFile({
      noPluginDir: true,
      path: (0, import_path.join)("core/loaders.ts"),
      content: `
${clientLoaderImports.join("\n")}
export default {
${clientLoaderDefines.join("\n")}
};
      `
    });
  });
  api.onBeforeCompiler(async () => {
    await import_esbuild.default.build({
      format: "esm",
      platform: "browser",
      target: "esnext",
      loader,
      watch: api.env === "development" && {},
      bundle: true,
      logLevel: "error",
      entryPoints: [(0, import_path.join)(api.paths.absTmpPath, "core/loaders.ts")],
      outfile: (0, import_path.join)(api.paths.absTmpPath, "core/loaders.js"),
      plugins: [
        {
          name: "imports",
          setup(build) {
            let entry;
            build.onResolve({ filter: /.*/ }, (args) => {
              if (args.kind === "entry-point")
                entry = args.path;
              if (args.kind === "entry-point" || args.importer === entry) {
                return { path: (0, import_path.resolve)(args.resolveDir, args.path) };
              }
              return {
                path: !args.path.startsWith(".") && !args.path.startsWith("/") ? args.path : (0, import_path.resolve)(args.resolveDir, args.path),
                external: true,
                sideEffects: false
              };
            });
          }
        }
      ]
    });
  });
};
var loader = {
  ".aac": "file",
  ".css": "text",
  ".less": "text",
  ".sass": "text",
  ".scss": "text",
  ".eot": "file",
  ".flac": "file",
  ".gif": "file",
  ".ico": "file",
  ".jpeg": "file",
  ".jpg": "file",
  ".js": "jsx",
  ".jsx": "jsx",
  ".json": "json",
  ".md": "jsx",
  ".mdx": "jsx",
  ".mp3": "file",
  ".mp4": "file",
  ".ogg": "file",
  ".otf": "file",
  ".png": "file",
  ".svg": "file",
  ".ts": "ts",
  ".tsx": "tsx",
  ".ttf": "file",
  ".wav": "file",
  ".webm": "file",
  ".webp": "file",
  ".woff": "file",
  ".woff2": "file"
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

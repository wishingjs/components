import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import ArrowLeftOutlined from '@ant-design/icons/ArrowLeftOutlined';
import ArrowRightOutlined from '@ant-design/icons/ArrowRightOutlined';
import { Avatar, Breadcrumb, ConfigProvider, Space } from 'antd';
import classNames from 'classnames';
import ResizeObserver from 'rc-resize-observer';
import * as React from 'react';
import useStyle from './style/index';
import 'antd/es/breadcrumb/style';
var renderBack = function renderBack(prefixCls, hashId, backIcon, onBack) {
  if (!backIcon || !onBack) {
    return null;
  }
  return _jsx("div", {
    className: "".concat(prefixCls, "-back ").concat(hashId),
    children: _jsx("div", {
      role: "button",
      onClick: function onClick(e) {
        onBack === null || onBack === void 0 ? void 0 : onBack(e);
      },
      className: "".concat(prefixCls, "-back-button ").concat(hashId),
      "aria-label": "back",
      children: backIcon
    })
  });
};
var renderBreadcrumb = function renderBreadcrumb(breadcrumb, prefixCls) {
  var _breadcrumb$routes;
  if (!((_breadcrumb$routes = breadcrumb.routes) === null || _breadcrumb$routes === void 0 ? void 0 : _breadcrumb$routes.length)) return null;
  return _jsx(Breadcrumb, _objectSpread(_objectSpread({}, breadcrumb), {}, {
    className: classNames("".concat(prefixCls, "-breadcrumb"), breadcrumb.className)
  }));
};
var getBackIcon = function getBackIcon(props) {
  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ltr';
  if (props.backIcon !== undefined) {
    return props.backIcon;
  }
  return direction === 'rtl' ? _jsx(ArrowRightOutlined, {}) : _jsx(ArrowLeftOutlined, {});
};
var renderTitle = function renderTitle(prefixCls, props) {
  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ltr';
  var hashId = arguments.length > 3 ? arguments[3] : undefined;
  var title = props.title,
    avatar = props.avatar,
    subTitle = props.subTitle,
    tags = props.tags,
    extra = props.extra,
    onBack = props.onBack;
  var headingPrefixCls = "".concat(prefixCls, "-heading");
  var hasHeading = title || subTitle || tags || extra;
  // If there is nothing, return a null
  if (!hasHeading) {
    return null;
  }
  var backIcon = getBackIcon(props, direction);
  var backIconDom = renderBack(prefixCls, hashId, backIcon, onBack);
  var hasTitle = backIconDom || avatar || hasHeading;
  return _jsxs("div", {
    className: headingPrefixCls + ' ' + hashId,
    children: [hasTitle && _jsxs("div", {
      className: "".concat(headingPrefixCls, "-left ").concat(hashId),
      children: [backIconDom, avatar && _jsx(Avatar, _objectSpread({
        className: classNames("".concat(headingPrefixCls, "-avatar"), hashId, avatar.className)
      }, avatar)), title && _jsx("span", {
        className: "".concat(headingPrefixCls, "-title ").concat(hashId),
        title: typeof title === 'string' ? title : undefined,
        children: title
      }), subTitle && _jsx("span", {
        className: "".concat(headingPrefixCls, "-sub-title ").concat(hashId),
        title: typeof subTitle === 'string' ? subTitle : undefined,
        children: subTitle
      }), tags && _jsx("span", {
        className: "".concat(headingPrefixCls, "-tags ").concat(hashId),
        children: tags
      })]
    }), extra && _jsx("span", {
      className: "".concat(headingPrefixCls, "-extra ").concat(hashId),
      children: _jsx(Space, {
        children: extra
      })
    })]
  });
};
var renderFooter = function renderFooter(prefixCls, footer, hashId) {
  if (footer) {
    return _jsx("div", {
      className: "".concat(prefixCls, "-footer ").concat(hashId),
      children: footer
    });
  }
  return null;
};
var renderChildren = function renderChildren(prefixCls, children, hashId) {
  return _jsx("div", {
    className: "".concat(prefixCls, "-content ").concat(hashId),
    children: children
  });
};
var PageHeader = function PageHeader(props) {
  var _breadcrumbRender, _classNames;
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    compact = _React$useState2[0],
    updateCompact = _React$useState2[1];
  var onResize = function onResize(_ref) {
    var width = _ref.width;
    updateCompact(width < 768);
  };
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls,
    direction = _React$useContext.direction;
  var customizePrefixCls = props.prefixCls,
    style = props.style,
    footer = props.footer,
    children = props.children,
    breadcrumb = props.breadcrumb,
    breadcrumbRender = props.breadcrumbRender,
    customizeClassName = props.className,
    contentWidth = props.contentWidth;
  var prefixCls = getPrefixCls('page-header', customizePrefixCls);
  var _useStyle = useStyle(prefixCls),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var getDefaultBreadcrumbDom = function getDefaultBreadcrumbDom() {
    if (breadcrumb === null || breadcrumb === void 0 ? void 0 : breadcrumb.routes) {
      return renderBreadcrumb(breadcrumb, prefixCls);
    }
    return null;
  };
  var defaultBreadcrumbDom = getDefaultBreadcrumbDom();
  var isBreadcrumbComponent = breadcrumb && 'props' in breadcrumb;
  // support breadcrumbRender function
  var breadcrumbRenderDomFromProps = (_breadcrumbRender = breadcrumbRender === null || breadcrumbRender === void 0 ? void 0 : breadcrumbRender(_objectSpread(_objectSpread({}, props), {}, {
    prefixCls: prefixCls
  }), defaultBreadcrumbDom)) !== null && _breadcrumbRender !== void 0 ? _breadcrumbRender : defaultBreadcrumbDom;
  var breadcrumbDom = isBreadcrumbComponent ? breadcrumb : breadcrumbRenderDomFromProps;
  var className = classNames(prefixCls, hashId, customizeClassName, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-has-breadcrumb"), !!breadcrumbDom), _defineProperty(_classNames, "".concat(prefixCls, "-has-footer"), !!footer), _defineProperty(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty(_classNames, "".concat(prefixCls, "-compact"), compact), _defineProperty(_classNames, "".concat(prefixCls, "-wide"), contentWidth === 'Fixed'), _defineProperty(_classNames, "".concat(prefixCls, "-ghost"), true), _classNames));
  var title = renderTitle(prefixCls, props, direction, hashId);
  var childDom = children && renderChildren(prefixCls, children, hashId);
  var footerDom = renderFooter(prefixCls, footer, hashId);
  if (!breadcrumbDom && !title && !footerDom && !childDom) {
    return null;
  }
  return wrapSSR(_jsx(ResizeObserver, {
    onResize: onResize,
    children: _jsxs("div", {
      className: className,
      style: style,
      children: [breadcrumbDom, title, childDom, footerDom]
    })
  }));
};
export { PageHeader };
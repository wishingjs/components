import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
var _excluded = ["id", "defaultMessage"],
  _excluded2 = ["fixSiderbar", "navTheme", "layout"];
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { ProConfigProvider, ProProvider } from '@ant-design/pro-provider';
import { isBrowser, useDocumentTitle, useMountMergeState } from '@ant-design/pro-utils';
import { getMatchMenu } from '@umijs/route-utils';
import { ConfigProvider, Layout } from 'antd';
import classNames from 'classnames';
import Omit from 'omit.js';
import useMergedState from 'rc-util/lib/hooks/useMergedState';
import warning from 'rc-util/lib/warning';
import { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import useSWR, { useSWRConfig } from 'swr';
import useAntdMediaQuery from 'use-media-antd-query';
import { Logo } from './assert/Logo';
import { DefaultFooter as Footer } from './components/Footer';
import { DefaultHeader as Header } from './components/Header';
import { PageLoading } from './components/PageLoading';
import { SiderMenu } from './components/SiderMenu';
import { RouteContext } from './context/RouteContext';
import { defaultSettings } from './defaultSettings';
import { getPageTitleInfo } from './getPageTitle';
import { gLocaleObject } from './locales';
import { useStyle } from './style';
import { getBreadcrumbProps } from './utils/getBreadcrumbProps';
import { getMenuData } from './utils/getMenuData';
import { useCurrentMenuLayoutProps } from './utils/useCurrentMenuLayoutProps';
import { clearMenuItem } from './utils/utils';
import { WrapContent } from './WrapContent';
var layoutIndex = 0;
var headerRender = function headerRender(props, matchMenuKeys) {
  var _props$stylish;
  if (props.headerRender === false || props.pure) {
    return null;
  }
  return _jsx(Header, _objectSpread(_objectSpread({
    matchMenuKeys: matchMenuKeys
  }, props), {}, {
    stylish: (_props$stylish = props.stylish) === null || _props$stylish === void 0 ? void 0 : _props$stylish.header
  }));
};
var footerRender = function footerRender(props) {
  if (props.footerRender === false || props.pure) {
    return null;
  }
  if (props.footerRender) {
    return props.footerRender(_objectSpread({}, props), _jsx(Footer, {}));
  }
  return null;
};
var renderSiderMenu = function renderSiderMenu(props, matchMenuKeys) {
  var _props$stylish3;
  var layout = props.layout,
    isMobile = props.isMobile,
    selectedKeys = props.selectedKeys,
    openKeys = props.openKeys,
    splitMenus = props.splitMenus,
    menuRender = props.menuRender;
  if (props.menuRender === false || props.pure) {
    return null;
  }
  var menuData = props.menuData;
  /** Â¶ÇÊûúÊòØÂàÜÂâ≤ËèúÂçïÊ®°ÂºèÔºåÈúÄË¶Å‰∏ìÈó®ÂÆûÁé∞‰∏Ä‰∏ã */
  if (splitMenus && (openKeys !== false || layout === 'mix') && !isMobile) {
    var _ref = selectedKeys || matchMenuKeys,
      _ref2 = _slicedToArray(_ref, 1),
      key = _ref2[0];
    if (key) {
      var _props$menuData, _props$menuData$find;
      menuData = ((_props$menuData = props.menuData) === null || _props$menuData === void 0 ? void 0 : (_props$menuData$find = _props$menuData.find(function (item) {
        return item.key === key;
      })) === null || _props$menuData$find === void 0 ? void 0 : _props$menuData$find.children) || [];
    } else {
      menuData = [];
    }
  }
  // ËøôÈáåËµ∞‰∫ÜÂèØ‰ª•Â∞ë‰∏ÄÊ¨°Âæ™ÁéØ
  var clearMenuData = clearMenuItem(menuData || []);
  if (clearMenuData && (clearMenuData === null || clearMenuData === void 0 ? void 0 : clearMenuData.length) < 1 && splitMenus) {
    return null;
  }
  if (layout === 'top' && !isMobile) {
    var _props$stylish2;
    return _jsx(SiderMenu, _objectSpread(_objectSpread({
      matchMenuKeys: matchMenuKeys
    }, props), {}, {
      hide: true,
      stylish: (_props$stylish2 = props.stylish) === null || _props$stylish2 === void 0 ? void 0 : _props$stylish2.sider
    }));
  }
  var defaultDom = _jsx(SiderMenu, _objectSpread(_objectSpread({
    matchMenuKeys: matchMenuKeys
  }, props), {}, {
    // ËøôÈáåËµ∞‰∫ÜÂèØ‰ª•Â∞ë‰∏ÄÊ¨°Âæ™ÁéØ
    menuData: clearMenuData,
    stylish: (_props$stylish3 = props.stylish) === null || _props$stylish3 === void 0 ? void 0 : _props$stylish3.sider
  }));
  if (menuRender) {
    return menuRender(props, defaultDom);
  }
  return defaultDom;
};
var defaultPageTitleRender = function defaultPageTitleRender(pageProps, props) {
  var pageTitleRender = props.pageTitleRender;
  var pageTitleInfo = getPageTitleInfo(pageProps);
  if (pageTitleRender === false) {
    return {
      title: props.title || '',
      id: '',
      pageName: ''
    };
  }
  if (pageTitleRender) {
    var title = pageTitleRender(pageProps, pageTitleInfo.title, pageTitleInfo);
    if (typeof title === 'string') {
      return getPageTitleInfo(_objectSpread(_objectSpread({}, pageTitleInfo), {}, {
        title: title
      }));
    }
    warning(typeof title === 'string', 'pro-layout: renderPageTitle return value should be a string');
  }
  return pageTitleInfo;
};
var getpaddingInlineStart = function getpaddingInlineStart(hasLeftPadding, collapsed, siderWidth) {
  if (hasLeftPadding) {
    return collapsed ? 60 : siderWidth;
  }
  return 0;
};
/**
 * üåÉ Powerful and easy to use beautiful layout üèÑ‚Äç Support multiple topics and layout types
 *
 * @param props
 */
var BaseProLayout = function BaseProLayout(props) {
  var _props$prefixCls, _classNames, _location$pathname, _token$layout, _token$layout$pageCon;
  var _ref3 = props || {},
    children = _ref3.children,
    propsOnCollapse = _ref3.onCollapse,
    _ref3$location = _ref3.location,
    location = _ref3$location === void 0 ? {
      pathname: '/'
    } : _ref3$location,
    contentStyle = _ref3.contentStyle,
    route = _ref3.route,
    defaultCollapsed = _ref3.defaultCollapsed,
    style = _ref3.style,
    propsSiderWidth = _ref3.siderWidth,
    menu = _ref3.menu,
    siderMenuType = _ref3.siderMenuType,
    propsIsChildrenLayout = _ref3.isChildrenLayout,
    menuDataRender = _ref3.menuDataRender,
    actionRef = _ref3.actionRef,
    bgLayoutImgList = _ref3.bgLayoutImgList,
    propsFormatMessage = _ref3.formatMessage,
    loading = _ref3.loading;
  var siderWidth = useMemo(function () {
    if (propsSiderWidth) return propsSiderWidth;
    if (props.layout === 'mix') return 215;
    return 256;
  }, [props.layout, propsSiderWidth]);
  var context = useContext(ConfigProvider.ConfigContext);
  var prefixCls = (_props$prefixCls = props.prefixCls) !== null && _props$prefixCls !== void 0 ? _props$prefixCls : context.getPrefixCls('pro');
  var _useMountMergeState = useMountMergeState(false, {
      value: menu === null || menu === void 0 ? void 0 : menu.loading,
      onChange: menu === null || menu === void 0 ? void 0 : menu.onLoadingChange
    }),
    _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),
    menuLoading = _useMountMergeState2[0],
    setMenuLoading = _useMountMergeState2[1];
  // give a default key for swr
  var _useState = useState(function () {
      layoutIndex += 1;
      return "pro-layout-".concat(layoutIndex);
    }),
    _useState2 = _slicedToArray(_useState, 1),
    defaultId = _useState2[0];
  /**
   * Â§ÑÁêÜÂõΩÈôÖÂåñÁõ∏ÂÖ≥ formatMessage
   * Â¶ÇÊûúÊúâÁî®Êà∑ÈÖçÁΩÆÁöÑ‰ª•Áî®Êà∑‰∏∫‰∏ª
   * Â¶ÇÊûúÊ≤°ÊúâÁî®Ëá™Â∑±ÂÆûÁé∞ÁöÑ
   */
  var formatMessage = useCallback(function (_ref4) {
    var id = _ref4.id,
      defaultMessage = _ref4.defaultMessage,
      restParams = _objectWithoutProperties(_ref4, _excluded);
    if (propsFormatMessage) {
      return propsFormatMessage(_objectSpread({
        id: id,
        defaultMessage: defaultMessage
      }, restParams));
    }
    var locales = gLocaleObject();
    return locales[id] ? locales[id] : defaultMessage;
  }, [propsFormatMessage]);
  var _useSWR = useSWR([defaultId, menu === null || menu === void 0 ? void 0 : menu.params], /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref5) {
        var _menu$request;
        var _ref7, params, menuDataItems;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref7 = _slicedToArray(_ref5, 2), params = _ref7[1];
              setMenuLoading(true);
              _context.next = 4;
              return menu === null || menu === void 0 ? void 0 : (_menu$request = menu.request) === null || _menu$request === void 0 ? void 0 : _menu$request.call(menu, params || {}, (route === null || route === void 0 ? void 0 : route.children) || (route === null || route === void 0 ? void 0 : route.routes) || []);
            case 4:
              menuDataItems = _context.sent;
              setMenuLoading(false);
              return _context.abrupt("return", menuDataItems);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x) {
        return _ref6.apply(this, arguments);
      };
    }(), {
      revalidateOnFocus: false,
      shouldRetryOnError: false,
      revalidateOnReconnect: false
    }),
    data = _useSWR.data,
    mutate = _useSWR.mutate;
  var _useSWRConfig = useSWRConfig(),
    cache = _useSWRConfig.cache;
  useEffect(function () {
    return function () {
      if (cache instanceof Map) cache.clear();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  var menuInfoData = useMemo(function () {
    return getMenuData(data || (route === null || route === void 0 ? void 0 : route.children) || (route === null || route === void 0 ? void 0 : route.routes) || [], menu, formatMessage, menuDataRender);
  }, [formatMessage, menu, menuDataRender, data, route === null || route === void 0 ? void 0 : route.children, route === null || route === void 0 ? void 0 : route.routes]);
  var _ref8 = menuInfoData || {},
    _ref8$breadcrumb = _ref8.breadcrumb,
    breadcrumb = _ref8$breadcrumb === void 0 ? {} : _ref8$breadcrumb,
    breadcrumbMap = _ref8.breadcrumbMap,
    _ref8$menuData = _ref8.menuData,
    menuData = _ref8$menuData === void 0 ? [] : _ref8$menuData;
  if (actionRef && (menu === null || menu === void 0 ? void 0 : menu.request)) {
    actionRef.current = {
      reload: function reload() {
        mutate();
      }
    };
  }
  var matchMenus = useMemo(function () {
    return getMatchMenu(location.pathname || '/', menuData || [], true);
  }, [location.pathname, menuData]);
  var matchMenuKeys = useMemo(function () {
    return Array.from(new Set(matchMenus.map(function (item) {
      return item.key || item.path || '';
    })));
  }, [matchMenus]);
  // ÂΩìÂâçÈÄâ‰∏≠ÁöÑmenuÔºå‰∏ÄËà¨‰∏ç‰ºö‰∏∫Á©∫
  var currentMenu = matchMenus[matchMenus.length - 1] || {};
  var currentMenuLayoutProps = useCurrentMenuLayoutProps(currentMenu);
  var _props$currentMenuLay = _objectSpread(_objectSpread({}, props), currentMenuLayoutProps),
    fixSiderbar = _props$currentMenuLay.fixSiderbar,
    navTheme = _props$currentMenuLay.navTheme,
    propsLayout = _props$currentMenuLay.layout,
    rest = _objectWithoutProperties(_props$currentMenuLay, _excluded2);
  var colSize = useAntdMediaQuery();
  var isMobile = (colSize === 'sm' || colSize === 'xs') && !props.disableMobile;
  // If it is a fix menu, calculate padding
  // don't need padding in phone mode
  /* Checking if the menu is loading and if it is, it will return a skeleton loading screen. */
  var hasLeftPadding = propsLayout !== 'top' && !isMobile;
  var _useMergedState = useMergedState(function () {
      if (defaultCollapsed !== undefined) return defaultCollapsed;
      if (process.env.NODE_ENV === 'TEST') return false;
      if (isMobile) return true;
      if (colSize === 'md') return true;
      return false;
    }, {
      value: props.collapsed,
      onChange: propsOnCollapse
    }),
    _useMergedState2 = _slicedToArray(_useMergedState, 2),
    collapsed = _useMergedState2[0],
    onCollapse = _useMergedState2[1];
  // Splicing parameters, adding menuData and formatMessage in props
  var defaultProps = Omit(_objectSpread(_objectSpread(_objectSpread({
    prefixCls: prefixCls
  }, props), {}, {
    siderWidth: siderWidth
  }, currentMenuLayoutProps), {}, {
    formatMessage: formatMessage,
    breadcrumb: breadcrumb,
    menu: _objectSpread(_objectSpread({}, menu), {}, {
      type: siderMenuType || (menu === null || menu === void 0 ? void 0 : menu.type),
      loading: menuLoading
    }),
    layout: propsLayout
  }), ['className', 'style', 'breadcrumbRender']);
  // gen page title
  var pageTitleInfo = defaultPageTitleRender(_objectSpread(_objectSpread({
    pathname: location.pathname
  }, defaultProps), {}, {
    breadcrumbMap: breadcrumbMap
  }), props);
  // gen breadcrumbProps, parameter for pageHeader
  var breadcrumbProps = getBreadcrumbProps(_objectSpread(_objectSpread({}, defaultProps), {}, {
    breadcrumbRender: props.breadcrumbRender,
    breadcrumbMap: breadcrumbMap
  }), props);
  // render sider dom
  var siderMenuDom = renderSiderMenu(_objectSpread(_objectSpread({}, defaultProps), {}, {
    menuData: menuData,
    onCollapse: onCollapse,
    isMobile: isMobile,
    collapsed: collapsed
  }), matchMenuKeys);
  // render header dom
  var headerDom = headerRender(_objectSpread(_objectSpread({}, defaultProps), {}, {
    children: null,
    hasSiderMenu: !!siderMenuDom,
    menuData: menuData,
    isMobile: isMobile,
    collapsed: collapsed,
    onCollapse: onCollapse
  }), matchMenuKeys);
  // render footer dom
  var footerDom = footerRender(_objectSpread({
    isMobile: isMobile,
    collapsed: collapsed
  }, defaultProps));
  var _useContext = useContext(RouteContext),
    contextIsChildrenLayout = _useContext.isChildrenLayout;
  // Â¶ÇÊûú props ‰∏≠ÂÆö‰πâÔºå‰ª• props ‰∏∫ÂáÜ
  var isChildrenLayout = propsIsChildrenLayout !== undefined ? propsIsChildrenLayout : contextIsChildrenLayout;
  var proLayoutClassName = "".concat(prefixCls, "-layout");
  var _useStyle = useStyle(proLayoutClassName),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  // gen className
  var className = classNames(props.className, hashId, 'ant-design-pro', proLayoutClassName, (_classNames = {}, _defineProperty(_classNames, "screen-".concat(colSize), colSize), _defineProperty(_classNames, "".concat(proLayoutClassName, "-top-menu"), propsLayout === 'top'), _defineProperty(_classNames, "".concat(proLayoutClassName, "-is-children"), isChildrenLayout), _defineProperty(_classNames, "".concat(proLayoutClassName, "-fix-siderbar"), fixSiderbar), _defineProperty(_classNames, "".concat(proLayoutClassName, "-").concat(propsLayout), propsLayout), _classNames));
  /** ËÆ°ÁÆó slider ÁöÑÂÆΩÂ∫¶ */
  var leftSiderWidth = getpaddingInlineStart(!!hasLeftPadding, collapsed, siderWidth);
  // siderMenuDom ‰∏∫Á©∫ÁöÑÊó∂ÂÄôÔºå‰∏çÈúÄË¶Å padding
  var genLayoutStyle = {
    position: 'relative'
  };
  // if is some layout children, don't need min height
  if (isChildrenLayout || contentStyle && contentStyle.minHeight) {
    genLayoutStyle.minHeight = 0;
  }
  /** È°µÈù¢ÂàáÊç¢ÁöÑÊó∂ÂÄôËß¶Âèë */
  useEffect(function () {
    var _props$onPageChange;
    (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, props.location);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.pathname, (_location$pathname = location.pathname) === null || _location$pathname === void 0 ? void 0 : _location$pathname.search]);
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    hasFooterToolbar = _useState4[0],
    setHasFooterToolbar = _useState4[1];
  /**
   * ‰ΩøÁî®numberÊòØÂõ†‰∏∫Â§öÊ†áÁ≠æÈ°µÁöÑÊó∂ÂÄôÊúâÂ§ö‰∏™ PageContainerÔºåÂè™ÊúâÊúâ‰ªªÊÑè‰∏Ä‰∏™Â∞±Â∫îËØ•Â±ïÁ§∫Ëøô‰∏™className
   */
  var _useState5 = useState(0),
    _useState6 = _slicedToArray(_useState5, 2),
    hasPageContainer = _useState6[0],
    setHasPageContainer = _useState6[1];
  useDocumentTitle(pageTitleInfo, props.title || false);
  var bgImgStyleList = useMemo(function () {
    if (bgLayoutImgList && bgLayoutImgList.length > 0) {
      return bgLayoutImgList.map(function (item, index) {
        return _jsx("img", {
          src: item.src,
          style: _objectSpread({
            position: 'absolute'
          }, item)
        }, index);
      });
    }
    return null;
  }, [bgLayoutImgList]);
  var _useContext2 = useContext(ProProvider),
    token = _useContext2.token;
  return wrapSSR(_jsx(RouteContext.Provider, {
    value: _objectSpread(_objectSpread({}, defaultProps), {}, {
      breadcrumb: breadcrumbProps,
      menuData: menuData,
      isMobile: isMobile,
      collapsed: collapsed,
      hasPageContainer: hasPageContainer,
      setHasPageContainer: setHasPageContainer,
      isChildrenLayout: true,
      title: pageTitleInfo.pageName,
      hasSiderMenu: !!siderMenuDom,
      hasHeader: !!headerDom,
      siderWidth: leftSiderWidth,
      hasFooter: !!footerDom,
      hasFooterToolbar: hasFooterToolbar,
      setHasFooterToolbar: setHasFooterToolbar,
      pageTitleInfo: pageTitleInfo,
      matchMenus: matchMenus,
      matchMenuKeys: matchMenuKeys,
      currentMenu: currentMenu
    }),
    children: props.pure ? _jsx(_Fragment, {
      children: children
    }) : _jsxs("div", {
      className: className,
      children: [_jsx("div", {
        className: "".concat(proLayoutClassName, "-bg-list ").concat(hashId),
        children: bgImgStyleList
      }), _jsxs(Layout, {
        style: _objectSpread({
          minHeight: '100%',
          // hack style
          flexDirection: siderMenuDom ? 'row' : undefined
        }, style),
        children: [siderMenuDom, _jsxs("div", {
          style: genLayoutStyle,
          className: "".concat(proLayoutClassName, "-container ").concat(hashId),
          children: [headerDom, _jsx(WrapContent, _objectSpread(_objectSpread({
            hasPageContainer: hasPageContainer,
            isChildrenLayout: isChildrenLayout
          }, rest), {}, {
            hasHeader: !!headerDom,
            prefixCls: proLayoutClassName,
            style: contentStyle,
            children: loading ? _jsx(PageLoading, {}) : children
          })), footerDom, hasFooterToolbar && _jsx("div", {
            className: "".concat(proLayoutClassName, "-has-footer"),
            style: {
              height: 64,
              marginBlockStart: token === null || token === void 0 ? void 0 : (_token$layout = token.layout) === null || _token$layout === void 0 ? void 0 : (_token$layout$pageCon = _token$layout.pageContainer) === null || _token$layout$pageCon === void 0 ? void 0 : _token$layout$pageCon.paddingBlockPageContainerContent
            }
          })]
        })]
      })]
    })
  }));
};
BaseProLayout.defaultProps = _objectSpread(_objectSpread({
  logo: _jsx(Logo, {})
}, defaultSettings), {}, {
  location: isBrowser() ? window.location : undefined
});
var ProLayout = function ProLayout(props) {
  var colorPrimary = props.colorPrimary;
  var darkProps = props.navTheme !== undefined ? {
    dark: props.navTheme === 'realDark'
  } : {};
  return _jsx(ConfigProvider, {
    theme: colorPrimary ? {
      token: {
        colorPrimary: colorPrimary
      }
    } : undefined,
    children: _jsx(ProConfigProvider, _objectSpread(_objectSpread({
      autoClearCache: true
    }, darkProps), {}, {
      token: props.token,
      prefixCls: props.prefixCls,
      children: _jsx(BaseProLayout, _objectSpread({}, props))
    }))
  });
};
export { ProLayout };
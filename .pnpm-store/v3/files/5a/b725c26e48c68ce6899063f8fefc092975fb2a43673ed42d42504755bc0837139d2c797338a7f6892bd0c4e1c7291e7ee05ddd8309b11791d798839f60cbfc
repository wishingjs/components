import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { jsx as _jsx } from "react/jsx-runtime";
import { openVisibleCompatible } from '@ant-design/pro-utils';
import { ConfigProvider, Drawer } from 'antd';
import classNames from 'classnames';
import Omit from 'omit.js';
import React, { useEffect } from 'react';
import { SiderMenu } from './SiderMenu';
import { useStyle } from './style/index';
var SiderMenuWrapper = function SiderMenuWrapper(props) {
  var isMobile = props.isMobile,
    siderWidth = props.siderWidth,
    collapsed = props.collapsed,
    onCollapse = props.onCollapse,
    style = props.style,
    className = props.className,
    hide = props.hide,
    getContainer = props.getContainer,
    prefixCls = props.prefixCls;
  useEffect(function () {
    if (isMobile === true) {
      onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(true);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isMobile]);
  var omitProps = Omit(props, ['className', 'style']);
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    direction = _React$useContext.direction;
  var _useStyle = useStyle("".concat(prefixCls, "-sider"), {
      proLayoutCollapsedWidth: 64
    }),
    wrapSSR = _useStyle.wrapSSR,
    hashId = _useStyle.hashId;
  var siderClassName = classNames("".concat(prefixCls, "-sider"), className, hashId);
  if (hide) {
    return null;
  }
  var drawerOpenProps = openVisibleCompatible(!collapsed, function () {
    return onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(true);
  });
  return wrapSSR(isMobile ? _jsx(Drawer, _objectSpread(_objectSpread({
    placement: direction === 'rtl' ? 'right' : 'left',
    className: classNames("".concat(prefixCls, "-drawer-sider"), className)
  }, drawerOpenProps), {}, {
    style: _objectSpread({
      padding: 0,
      height: '100vh'
    }, style),
    maskClosable: true,
    closable: false,
    getContainer: getContainer,
    width: siderWidth,
    bodyStyle: {
      height: '100vh',
      padding: 0,
      display: 'flex',
      flexDirection: 'row'
    },
    children: _jsx(SiderMenu, _objectSpread(_objectSpread({}, omitProps), {}, {
      isMobile: true,
      className: siderClassName,
      collapsed: isMobile ? false : collapsed,
      splitMenus: false,
      originCollapsed: collapsed
    }))
  })) : _jsx(SiderMenu, _objectSpread(_objectSpread({
    className: siderClassName,
    originCollapsed: collapsed
  }, omitProps), {}, {
    style: style
  })));
};
export { SiderMenuWrapper as SiderMenu };
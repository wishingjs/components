import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["rowKey", "dragSortKey", "dragSortHandlerRender", "onDragSortEnd", "onDataSourceChange", "columns", "defaultData", "dataSource", "onLoad"];
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { MenuOutlined } from '@ant-design/icons';
import { ConfigProvider } from 'antd';
import useMergedState from 'rc-util/lib/hooks/useMergedState';
import { useCallback, useContext, useMemo, useRef } from 'react';
import { SortableHandle } from 'react-sortable-hoc';
import ProTable from '../../Table';
import { useDragSort } from '../../utils/useDragSort';
import { useStyle } from './style';
// 用于创建可拖拽把手组件的工厂
var handleCreator = function handleCreator(handle) {
  return SortableHandle(function () {
    return _jsx(_Fragment, {
      children: handle
    });
  });
};
function DragSortTable(props) {
  var rowKey = props.rowKey,
    dragSortKey = props.dragSortKey,
    dragSortHandlerRender = props.dragSortHandlerRender,
    onDragSortEnd = props.onDragSortEnd,
    onDataSourceChange = props.onDataSourceChange,
    propsColumns = props.columns,
    defaultData = props.defaultData,
    originDataSource = props.dataSource,
    onLoad = props.onLoad,
    otherProps = _objectWithoutProperties(props, _excluded);
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var _useMergedState = useMergedState(function () {
      return defaultData || [];
    }, {
      value: originDataSource,
      onChange: onDataSourceChange
    }),
    _useMergedState2 = _slicedToArray(_useMergedState, 2),
    dataSource = _useMergedState2[0],
    setMergedDs = _useMergedState2[1];
  // 默认拖拽把手
  var DragHandle = useMemo(function () {
    return handleCreator(_jsx(MenuOutlined, {
      className: getPrefixCls('pro-table-drag-icon')
    }));
  }, [getPrefixCls]);
  var _useStyle = useStyle(getPrefixCls('pro-table-drag-icon')),
    wrapSSR = _useStyle.wrapSSR;
  var isDragSortColumn = useCallback(function (item) {
    return item.key === dragSortKey || item.dataIndex === dragSortKey;
  }, [dragSortKey]);
  // 根据 dragSortKey 查找目标列配置
  var handleColumn = useMemo(function () {
    return propsColumns === null || propsColumns === void 0 ? void 0 : propsColumns.find(function (item) {
      return isDragSortColumn(item);
    });
  }, [propsColumns, isDragSortColumn]);
  // 记录原始列配置
  var originColumnRef = useRef(_objectSpread({}, handleColumn));
  // 使用自定义hooks获取拖拽相关组件的components集合
  var _useDragSort = useDragSort({
      dataSource: dataSource === null || dataSource === void 0 ? void 0 : dataSource.slice(),
      dragSortKey: dragSortKey,
      onDragSortEnd: onDragSortEnd,
      components: props.components,
      rowKey: rowKey
    }),
    components = _useDragSort.components;
  // 重写列配置的render
  var columns = useMemo(function () {
    var originColumn = originColumnRef.current;
    if (!handleColumn) return propsColumns;
    var dargRender = function dargRender() {
      var _originColumn$render;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var dom = args[0],
        rowData = args[1],
        index = args[2],
        action = args[3],
        schema = args[4];
      var RealHandle = dragSortHandlerRender ? handleCreator(dragSortHandlerRender(rowData, index)) : DragHandle;
      return _jsx("div", {
        className: getPrefixCls('pro-table-drag-visible-cell'),
        children: _jsxs(_Fragment, {
          children: [_jsx(RealHandle, {}), (_originColumn$render = originColumn.render) === null || _originColumn$render === void 0 ? void 0 : _originColumn$render.call(originColumn, dom, rowData, index, action, schema)]
        })
      });
    };
    // 重新生成数据
    return propsColumns === null || propsColumns === void 0 ? void 0 : propsColumns.map(function (item) {
      if (!isDragSortColumn(item)) {
        return item;
      }
      return _objectSpread(_objectSpread({}, item), {}, {
        render: dargRender
      });
    });
  }, [DragHandle, dragSortHandlerRender, getPrefixCls, handleColumn, isDragSortColumn, propsColumns]);
  var wrapOnload = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ds) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setMergedDs(ds);
            return _context.abrupt("return", onLoad === null || onLoad === void 0 ? void 0 : onLoad(ds));
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function wrapOnload(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  return wrapSSR(handleColumn ? _jsx(ProTable, _objectSpread(_objectSpread({}, otherProps), {}, {
    onLoad: wrapOnload,
    rowKey: rowKey,
    dataSource: dataSource,
    components: components,
    columns: columns,
    onDataSourceChange: onDataSourceChange
  })) : /* istanbul ignore next */
  _jsx(ProTable, _objectSpread(_objectSpread({}, otherProps), {}, {
    onLoad: wrapOnload,
    rowKey: rowKey,
    dataSource: dataSource,
    columns: columns,
    onDataSourceChange: onDataSourceChange
  })));
}
export default DragSortTable;
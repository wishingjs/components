var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/monorepo/redirect.ts
var redirect_exports = {};
__export(redirect_exports, {
  default: () => redirect_default
});
module.exports = __toCommonJS(redirect_exports);
var import_utils = require("@umijs/utils");
var import_pkg_up = require("@umijs/utils/compiled/pkg-up");
var import_assert = __toESM(require("assert"));
var import_fs = require("fs");
var import_path = require("path");
var import_get_packages = require("../../../compiled/@manypkg/get-packages");
var redirect_default = (api) => {
  api.describe({
    key: "monorepoRedirect",
    config: {
      schema(Joi) {
        return Joi.alternatives(
          Joi.boolean(),
          Joi.object({
            srcDir: Joi.array().items(Joi.string()),
            exclude: Joi.array().items(Joi.object().instance(RegExp))
          })
        );
      }
    },
    enableBy: api.EnableBy.config
  });
  api.modifyConfig(async (memo) => {
    const rootPkg = await (0, import_pkg_up.pkgUp)({
      cwd: (0, import_path.dirname)(process.env.APP_ROOT ? process.cwd() : api.cwd)
    });
    if (!rootPkg)
      return memo;
    const root = (0, import_path.dirname)(rootPkg);
    (0, import_assert.default)(
      (0, import_utils.isMonorepo)({ root }),
      `The 'monorepoRedirect' option can only be used in monorepo, you don't need configure.`
    );
    const config = memo.monorepoRedirect || {};
    const { exclude = [], srcDir = ["src"] } = config;
    if ((0, import_utils.isLocalDev)()) {
      import_utils.logger.info(
        `[monorepoRedirect]: Auto excluded 'umi' package in local dev scene`
      );
      exclude.push(/^umi$/);
    }
    const usingDeps = collectPkgDeps(api.pkg).filter((name) => {
      return !exclude.some((reg) => reg.test(name));
    });
    if (!usingDeps.length)
      return memo;
    const projects = await collectAllProjects({ root });
    const alias = usingDeps.reduce((obj, name) => {
      const root2 = projects[name];
      if (!root2) {
        return obj;
      }
      srcDir.some((dirName) => {
        const dirPath = (0, import_path.join)(root2, dirName);
        if ((0, import_fs.existsSync)(dirPath) && (0, import_fs.statSync)(dirPath).isDirectory()) {
          obj[name] = dirPath;
          return true;
        }
      });
      return obj;
    }, {});
    memo.alias = {
      ...memo.alias,
      ...alias
    };
    return memo;
  });
};
var DEP_KEYS = ["devDependencies", "dependencies"];
function collectPkgDeps(pkg) {
  const deps = [];
  DEP_KEYS.forEach((type) => {
    deps.push(...Object.keys((pkg == null ? void 0 : pkg[type]) || {}));
  });
  return deps;
}
async function collectAllProjects(opts) {
  const workspaces = await (0, import_get_packages.getPackages)(opts.root);
  return workspaces.packages.reduce(
    (obj, pkg) => {
      var _a;
      const name = (_a = pkg.packageJson) == null ? void 0 : _a.name;
      if (name) {
        obj[name] = pkg.dir;
      }
      return obj;
    },
    {}
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

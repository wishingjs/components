var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/features/icons/icons.ts
var icons_exports = {};
__export(icons_exports, {
  default: () => icons_default
});
module.exports = __toCommonJS(icons_exports);
var import_utils = require("@umijs/utils");
var import_path = __toESM(require("path"));
var icons_default = (api) => {
  api.describe({
    config: {
      schema(Joi) {
        return Joi.object({
          autoInstall: Joi.object(),
          defaultComponentConfig: Joi.object(),
          alias: Joi.object()
        });
      }
    },
    enableBy: api.EnableBy.config
  });
  api.onCheckConfig(() => {
    if (api.config.icons.autoInstall && (api.appData.npmClient === "tnpm" || api.appData.npmClient === "cnpm")) {
      throw new Error(
        `[icons] autoInstall option don't support ${api.appData.npmClient}`
      );
    }
  });
  const EMPTY_ICONS_FILE = `export const __no_icons = true;`;
  const icons = /* @__PURE__ */ new Set();
  api.addPrepareBuildPlugins(() => {
    const { esbuildIconPlugin } = (0, import_utils.importLazy)(require.resolve("./esbuildIconPlugin"));
    return [
      esbuildIconPlugin({
        icons,
        alias: api.config.icons.alias || {}
      })
    ];
  });
  api.onPrepareBuildSuccess(async () => {
    if (!icons.size) {
      import_utils.logger.info(`[icons] no icons was found`);
      return;
    }
    import_utils.logger.info(`[icons] generate icons ${Array.from(icons).join(", ")}`);
    const code = [];
    const { generateIconName, generateSvgr } = await import("./svgr.js");
    for (const iconStr of icons) {
      const [collect, icon] = iconStr.split(":");
      const iconName = generateIconName({ collect, icon });
      const svgr = await generateSvgr({
        collect,
        icon,
        iconifyOptions: { autoInstall: api.config.icons.autoInstall },
        localIconDir: import_path.default.join(api.paths.absSrcPath, "icons")
      });
      if (svgr) {
        code.push(svgr);
        code.push(`export { ${iconName} };`);
      } else {
        if (api.env === "development") {
          icons.delete(iconStr);
          import_utils.logger.error(`[icons] Icon ${iconStr} not found`);
        } else {
          throw new Error(`[icons] Icon ${iconStr} not found`);
        }
      }
    }
    api.writeTmpFile({
      path: "icons.tsx",
      content: code.join("\n") || EMPTY_ICONS_FILE
    });
  });
  api.onGenerateFiles(({ isFirstTime }) => {
    if (isFirstTime) {
      api.writeTmpFile({
        path: "icons.tsx",
        content: EMPTY_ICONS_FILE
      });
    }
    api.writeTmpFile({
      path: "index.tsx",
      content: `
import React from 'react';
import * as iconsMap from './icons';
import './index.css';

const alias = ${JSON.stringify(api.config.icons.alias || {})};
type AliasKeys = keyof typeof alias;

interface IUmiIconProps extends React.SVGAttributes<SVGElement> {
  icon: AliasKeys | string;
  hover?: AliasKeys | string;
  className?: string;
  viewBox?: string;
  width?: string;
  height?: string;
  style?: any;
  spin?: boolean;
  rotate?: number | string;
  flip?: 'vertical' | 'horizontal' | 'horizontal,vertical' | 'vertical,horizontal';
}

export const Icon = React.forwardRef((props: IUmiIconProps, ref) => {
  const { icon, hover, style, className, rotate, flip, ...extraProps } = props;
  const iconName = normalizeIconName(alias[icon] || icon);
  const Component = iconsMap[iconName];
  if (!Component) {
    // TODO: give a error icon when dev, to help developer find the error
    return null;
  }
  const HoverComponent = hover ? iconsMap[normalizeIconName(alias[hover] || hover)] : null;
  const cls = props.spin ? 'umiIconLoadingCircle' : undefined;
  const svgStyle = {};
  const transform: string[] = [];
  if (rotate) {
    const rotateDeg = normalizeRotate(rotate);
    transform.push(\`rotate(\${rotateDeg}deg)\`);
  }
  if (flip) {
    const flipMap = flip.split(',').reduce((memo, item) => {
      memo[item] = 1;
      return memo;
    }, {});
    if (flipMap.vertical) {
      transform.push(\`rotateY(180deg)\`);
    }
    if (flipMap.horizontal) {
      transform.push(\`rotateX(180deg)\`);
    }
  }
  if (transform.length) {
    const transformStr = transform.join('');
    svgStyle.msTransform = transformStr;
    svgStyle.transform = transformStr;
  }
  return (
    <span role="img" ref={ref} className={HoverComponent ? 'umiIconDoNotUseThis ' : '' + className} style={style}>
      <Component {...extraProps} className={cls} style={svgStyle} />
      {
        HoverComponent ? <HoverComponent {...extraProps} className={'umiIconDoNotUseThisHover ' + cls} style={svgStyle} /> : null
      }
    </span>
  );
});

function normalizeRotate(rotate: number | string) {
  if (typeof rotate === 'number') {
    return rotate * 90;
  }
  if (typeof rotate === 'string') {
    if (rotate.endsWith('deg')) {
      return parseInt(rotate, 10);
    }
    if (rotate.endsWith('%')) {
      return parseInt(rotate, 10) / 100 * 360;
    }
    return 0;
  }
}

function camelCase(str: string) {
  return str.replace(/-([a-z]|[1-9])/g, (g) => g[1].toUpperCase());
}

function normalizeIconName(name: string) {
  return camelCase(name.replace(':', '-'));
}
      `
    });
    api.writeTmpFile({
      path: "index.css",
      content: `
.umiIconDoNotUseThisHover {
  display: none;
}
.umiIconDoNotUseThis:hover svg {
  display: none;
}
.umiIconDoNotUseThis:hover .umiIconDoNotUseThisHover {
  display: inline-block;
}
.umiIconLoadingCircle {
  display: inline-block;
  -webkit-animation: loadingCircle 1s infinite linear;
  animation: umiIconLoadingCircle 1s linear infinite;
}

@-webkit-keyframes umiIconLoadingCircle {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes umiIconLoadingCircle {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
      `
    });
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/loaders/markdown/transformer/rehypeLink.ts
var rehypeLink_exports = {};
__export(rehypeLink_exports, {
  default: () => rehypeLink
});
module.exports = __toCommonJS(rehypeLink_exports);
var import_path = __toESM(require("path"));
var import_plugin_utils = require("umi/plugin-utils");
var import_url = __toESM(require("url"));
var visit;
var SKIP;
(async () => {
  ({ visit, SKIP } = await import("unist-util-visit"));
})();
function rehypeLink(opts) {
  return (tree) => {
    visit(tree, "element", (node, i, parent) => {
      var _a;
      if (node.tagName === "a" && typeof ((_a = node.properties) == null ? void 0 : _a.href) === "string") {
        const href = node.properties.href;
        const parsedUrl = import_url.default.parse(href);
        if (parsedUrl.hostname)
          return SKIP;
        if (/\.md$/i.test(parsedUrl.pathname)) {
          const { routers } = opts;
          const absPath = (0, import_plugin_utils.winPath)(import_path.default.resolve(opts.fileAbsPath, "..", parsedUrl.pathname));
          Object.keys(routers).forEach((key) => {
            if (routers[key].file === absPath) {
              parsedUrl.pathname = routers[key].absPath;
            }
          });
        }
        parent.children.splice(i, 1, {
          type: "element",
          tagName: "Link",
          children: node.children,
          properties: {
            ...import_plugin_utils.lodash.omit(node.properties, ["href"]),
            to: import_url.default.format(parsedUrl)
          }
        });
      }
    });
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

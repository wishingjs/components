import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useIntl } from '@ant-design/pro-provider';
import { FieldLabel, parseValueToDay, useStyle } from '@ant-design/pro-utils';
import { ConfigProvider, DatePicker } from 'antd';
import dayjs from 'dayjs';
import weekOfYear from 'dayjs/plugin/weekOfYear';
import React, { useContext, useState } from 'react';
// 兼容代码-----------
import 'antd/es/date-picker/style';
//----------------------
dayjs.extend(weekOfYear);
var formatDate = function formatDate(text, format) {
  if (!text) {
    return '-';
  }
  if (typeof format === 'function') {
    return format(dayjs(text));
  } else {
    return dayjs(text).format(format || 'YYYY-MM-DD');
  }
};
export var useDatePickerStyle = function useDatePickerStyle() {
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('pro-field-date-picker');
  // css
  var css = useStyle('DatePicker', function (token) {
    return _defineProperty({}, ".".concat(prefixCls, "-light"), _defineProperty({}, "".concat(token.antCls, "-picker,").concat(token.antCls, "-calendar-picker"), {
      position: 'absolute',
      width: '80px',
      height: '28px',
      overflow: 'hidden',
      visibility: 'hidden'
    }));
  });
  return _objectSpread(_objectSpread({}, css), {}, {
    prefixCls: prefixCls
  });
};
/**
 * 日期选择组件
 *
 * @param
 */
var FieldDatePicker = function FieldDatePicker(_ref2, ref) {
  var text = _ref2.text,
    mode = _ref2.mode,
    format = _ref2.format,
    label = _ref2.label,
    light = _ref2.light,
    render = _ref2.render,
    renderFormItem = _ref2.renderFormItem,
    plain = _ref2.plain,
    showTime = _ref2.showTime,
    fieldProps = _ref2.fieldProps,
    picker = _ref2.picker,
    bordered = _ref2.bordered,
    lightLabel = _ref2.lightLabel,
    labelTrigger = _ref2.labelTrigger;
  var intl = useIntl();
  var size = useContext(ConfigProvider.SizeContext);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useDatePickerStyle = useDatePickerStyle(),
    hashId = _useDatePickerStyle.hashId,
    prefixCls = _useDatePickerStyle.prefixCls,
    wrapSSR = _useDatePickerStyle.wrapSSR;
  if (mode === 'read') {
    var dom = formatDate(text, fieldProps.format || format);
    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), _jsx(_Fragment, {
        children: dom
      }));
    }
    return _jsx(_Fragment, {
      children: dom
    });
  }
  if (mode === 'edit' || mode === 'update') {
    var _dom;
    var disabled = fieldProps.disabled,
      value = fieldProps.value,
      _onChange = fieldProps.onChange,
      allowClear = fieldProps.allowClear,
      _fieldProps$placehold = fieldProps.placeholder,
      placeholder = _fieldProps$placehold === void 0 ? intl.getMessage('tableForm.selectPlaceholder', '请选择') : _fieldProps$placehold;
    var momentValue = parseValueToDay(value);
    if (light) {
      var valueStr = momentValue && momentValue.format(format) || '';
      _dom = _jsxs("div", {
        className: "".concat(prefixCls, "-light ").concat(hashId),
        onClick: function onClick(e) {
          var _lightLabel$current, _lightLabel$current$l, _lightLabel$current$l2;
          // 点击label切换下拉菜单
          var isLabelClick = lightLabel === null || lightLabel === void 0 ? void 0 : (_lightLabel$current = lightLabel.current) === null || _lightLabel$current === void 0 ? void 0 : (_lightLabel$current$l = _lightLabel$current.labelRef) === null || _lightLabel$current$l === void 0 ? void 0 : (_lightLabel$current$l2 = _lightLabel$current$l.current) === null || _lightLabel$current$l2 === void 0 ? void 0 : _lightLabel$current$l2.contains(e.target);
          if (isLabelClick) {
            setOpen(!open);
          } else {
            setOpen(true);
          }
        },
        children: [_jsx(DatePicker, _objectSpread(_objectSpread({
          picker: picker,
          showTime: showTime,
          format: format,
          ref: ref
        }, fieldProps), {}, {
          value: momentValue,
          onChange: function onChange(v) {
            _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
            setTimeout(function () {
              setOpen(false);
            }, 0);
          },
          onOpenChange: function onOpenChange(isOpen) {
            if (!labelTrigger) {
              setOpen(isOpen);
            }
          },
          open: open
        })), _jsx(FieldLabel, {
          label: label,
          disabled: disabled,
          placeholder: placeholder,
          size: size,
          value: valueStr,
          onClear: function onClear() {
            _onChange === null || _onChange === void 0 ? void 0 : _onChange(null);
          },
          allowClear: allowClear,
          bordered: bordered,
          expanded: open,
          ref: lightLabel
        })]
      });
    } else {
      _dom = _jsx(DatePicker, _objectSpread(_objectSpread({
        picker: picker,
        showTime: showTime,
        format: format,
        placeholder: placeholder,
        bordered: plain === undefined ? true : !plain,
        ref: ref
      }, fieldProps), {}, {
        value: momentValue
      }));
    }
    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom);
    }
    return wrapSSR(_dom);
  }
  return null;
};
export default /*#__PURE__*/React.forwardRef(FieldDatePicker);